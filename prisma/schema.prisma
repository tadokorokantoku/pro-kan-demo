// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String   @id @default(cuid())
//   email     String   @unique
//   name      String?
//   password  String
//   assignments Assignment[]
//   Task      Task[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Project {
  id        String   @id @default(cuid())
  name      String
  status    String
  url       String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks    Task[]
  assignments Assignment[]
}

model Assignment {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  @@id([userId, projectId])
}

model Task {
  id        String   @id @default(cuid())
  name      String
  description String?
  status    String
  project   Project?  @relation(fields: [projectId], references: [id])
  projectId String?
  action    Action?  @relation(fields: [actionId], references: [id])
  actionId  String
  user      User? @relation(fields: [userId], references: [id])
  userId    String?
  startedAt DateTime?
  endedAt   DateTime?
  estimatedHours Int?
  ActualHours Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Action {
  id        String   @id @default(cuid())
  name      String
  canBeExecutedOnOthers Boolean @default(false)
  tasks      Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Task      Task[]
  assignments Assignment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}